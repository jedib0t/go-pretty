// Code generated by MockGen. DO NOT EDIT.
// Source: table.go

// Package mock_gopretty is a generated GoMock package.
package mock_gopretty

import (
	gomock "github.com/golang/mock/gomock"
	go_pretty "github.com/jedib0t/go-pretty"
	reflect "reflect"
)

// MockTableWriter is a mock of TableWriter interface
type MockTableWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTableWriterMockRecorder
}

// MockTableWriterMockRecorder is the mock recorder for MockTableWriter
type MockTableWriterMockRecorder struct {
	mock *MockTableWriter
}

// NewMockTableWriter creates a new mock instance
func NewMockTableWriter(ctrl *gomock.Controller) *MockTableWriter {
	mock := &MockTableWriter{ctrl: ctrl}
	mock.recorder = &MockTableWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTableWriter) EXPECT() *MockTableWriterMockRecorder {
	return m.recorder
}

// AppendFooter mocks base method
func (m *MockTableWriter) AppendFooter(row go_pretty.TableRow) {
	m.ctrl.Call(m, "AppendFooter", row)
}

// AppendFooter indicates an expected call of AppendFooter
func (mr *MockTableWriterMockRecorder) AppendFooter(row interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFooter", reflect.TypeOf((*MockTableWriter)(nil).AppendFooter), row)
}

// AppendHeader mocks base method
func (m *MockTableWriter) AppendHeader(row go_pretty.TableRow) {
	m.ctrl.Call(m, "AppendHeader", row)
}

// AppendHeader indicates an expected call of AppendHeader
func (mr *MockTableWriterMockRecorder) AppendHeader(row interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendHeader", reflect.TypeOf((*MockTableWriter)(nil).AppendHeader), row)
}

// AppendRow mocks base method
func (m *MockTableWriter) AppendRow(row go_pretty.TableRow) {
	m.ctrl.Call(m, "AppendRow", row)
}

// AppendRow indicates an expected call of AppendRow
func (mr *MockTableWriterMockRecorder) AppendRow(row interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRow", reflect.TypeOf((*MockTableWriter)(nil).AppendRow), row)
}

// AppendRows mocks base method
func (m *MockTableWriter) AppendRows(rows []go_pretty.TableRow) {
	m.ctrl.Call(m, "AppendRows", rows)
}

// AppendRows indicates an expected call of AppendRows
func (mr *MockTableWriterMockRecorder) AppendRows(rows interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRows", reflect.TypeOf((*MockTableWriter)(nil).AppendRows), rows)
}

// DisableBorder mocks base method
func (m *MockTableWriter) DisableBorder() {
	m.ctrl.Call(m, "DisableBorder")
}

// DisableBorder indicates an expected call of DisableBorder
func (mr *MockTableWriterMockRecorder) DisableBorder() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableBorder", reflect.TypeOf((*MockTableWriter)(nil).DisableBorder))
}

// EnableSeparators mocks base method
func (m *MockTableWriter) EnableSeparators() {
	m.ctrl.Call(m, "EnableSeparators")
}

// EnableSeparators indicates an expected call of EnableSeparators
func (mr *MockTableWriterMockRecorder) EnableSeparators() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableSeparators", reflect.TypeOf((*MockTableWriter)(nil).EnableSeparators))
}

// Length mocks base method
func (m *MockTableWriter) Length() int {
	ret := m.ctrl.Call(m, "Length")
	ret0, _ := ret[0].(int)
	return ret0
}

// Length indicates an expected call of Length
func (mr *MockTableWriterMockRecorder) Length() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Length", reflect.TypeOf((*MockTableWriter)(nil).Length))
}

// Render mocks base method
func (m *MockTableWriter) Render() string {
	ret := m.ctrl.Call(m, "Render")
	ret0, _ := ret[0].(string)
	return ret0
}

// Render indicates an expected call of Render
func (mr *MockTableWriterMockRecorder) Render() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockTableWriter)(nil).Render))
}

// RenderCSV mocks base method
func (m *MockTableWriter) RenderCSV() string {
	ret := m.ctrl.Call(m, "RenderCSV")
	ret0, _ := ret[0].(string)
	return ret0
}

// RenderCSV indicates an expected call of RenderCSV
func (mr *MockTableWriterMockRecorder) RenderCSV() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderCSV", reflect.TypeOf((*MockTableWriter)(nil).RenderCSV))
}

// RenderHTML mocks base method
func (m *MockTableWriter) RenderHTML() string {
	ret := m.ctrl.Call(m, "RenderHTML")
	ret0, _ := ret[0].(string)
	return ret0
}

// RenderHTML indicates an expected call of RenderHTML
func (mr *MockTableWriterMockRecorder) RenderHTML() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenderHTML", reflect.TypeOf((*MockTableWriter)(nil).RenderHTML))
}

// SetAlign mocks base method
func (m *MockTableWriter) SetAlign(align []go_pretty.Align) {
	m.ctrl.Call(m, "SetAlign", align)
}

// SetAlign indicates an expected call of SetAlign
func (mr *MockTableWriterMockRecorder) SetAlign(align interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAlign", reflect.TypeOf((*MockTableWriter)(nil).SetAlign), align)
}

// SetCaption mocks base method
func (m *MockTableWriter) SetCaption(caption string) {
	m.ctrl.Call(m, "SetCaption", caption)
}

// SetCaption indicates an expected call of SetCaption
func (mr *MockTableWriterMockRecorder) SetCaption(caption interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCaption", reflect.TypeOf((*MockTableWriter)(nil).SetCaption), caption)
}

// SetColors mocks base method
func (m *MockTableWriter) SetColors(colors []go_pretty.TextColor) {
	m.ctrl.Call(m, "SetColors", colors)
}

// SetColors indicates an expected call of SetColors
func (mr *MockTableWriterMockRecorder) SetColors(colors interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColors", reflect.TypeOf((*MockTableWriter)(nil).SetColors), colors)
}

// SetColorsFooter mocks base method
func (m *MockTableWriter) SetColorsFooter(colors []go_pretty.TextColor) {
	m.ctrl.Call(m, "SetColorsFooter", colors)
}

// SetColorsFooter indicates an expected call of SetColorsFooter
func (mr *MockTableWriterMockRecorder) SetColorsFooter(colors interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColorsFooter", reflect.TypeOf((*MockTableWriter)(nil).SetColorsFooter), colors)
}

// SetColorsHeader mocks base method
func (m *MockTableWriter) SetColorsHeader(colors []go_pretty.TextColor) {
	m.ctrl.Call(m, "SetColorsHeader", colors)
}

// SetColorsHeader indicates an expected call of SetColorsHeader
func (mr *MockTableWriterMockRecorder) SetColorsHeader(colors interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetColorsHeader", reflect.TypeOf((*MockTableWriter)(nil).SetColorsHeader), colors)
}

// SetHTMLCSSClass mocks base method
func (m *MockTableWriter) SetHTMLCSSClass(cssClass string) {
	m.ctrl.Call(m, "SetHTMLCSSClass", cssClass)
}

// SetHTMLCSSClass indicates an expected call of SetHTMLCSSClass
func (mr *MockTableWriterMockRecorder) SetHTMLCSSClass(cssClass interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHTMLCSSClass", reflect.TypeOf((*MockTableWriter)(nil).SetHTMLCSSClass), cssClass)
}

// SetStyle mocks base method
func (m *MockTableWriter) SetStyle(style go_pretty.TableStyle) {
	m.ctrl.Call(m, "SetStyle", style)
}

// SetStyle indicates an expected call of SetStyle
func (mr *MockTableWriterMockRecorder) SetStyle(style interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStyle", reflect.TypeOf((*MockTableWriter)(nil).SetStyle), style)
}

// SetVAlign mocks base method
func (m *MockTableWriter) SetVAlign(vAlign []go_pretty.VAlign) {
	m.ctrl.Call(m, "SetVAlign", vAlign)
}

// SetVAlign indicates an expected call of SetVAlign
func (mr *MockTableWriterMockRecorder) SetVAlign(vAlign interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVAlign", reflect.TypeOf((*MockTableWriter)(nil).SetVAlign), vAlign)
}

// Style mocks base method
func (m *MockTableWriter) Style() *go_pretty.TableStyle {
	ret := m.ctrl.Call(m, "Style")
	ret0, _ := ret[0].(*go_pretty.TableStyle)
	return ret0
}

// Style indicates an expected call of Style
func (mr *MockTableWriterMockRecorder) Style() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Style", reflect.TypeOf((*MockTableWriter)(nil).Style))
}
